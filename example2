
1. **创建 Spring Boot 项目**

   使用 Spring Initializr 创建一个新的 Spring Boot 项目，并选择以下依赖项：
   - Spring Web
   - Spring Security

2. **配置 `application.properties`**

   在 `src/main/resources/application.properties` 文件中配置 Spring Security 的基本设置：

   spring.security.user.name=test
   spring.security.user.password=123456

3. **创建控制器类**

   在 `src/main/java/com/example/demo` 下创建一个新的控制器类，例如 `HelloWorldController`，并实现 HelloWorld API：

   package com.example.demo;

   import org.springframework.web.bind.annotation.GetMapping;
   import org.springframework.web.bind.annotation.RequestMapping;
   import org.springframework.web.bind.annotation.RestController;

   @RestController
   @RequestMapping("/api")
   public class HelloWorldController {

       @GetMapping("/hello")
       public String helloWorld() {
           return "Hello World";
       }
   }
  

4. **配置 Spring Security**

   创建一个安全配置类 `SecurityConfig` 来配置 Spring Security。这个类会设置基本的 HTTP 基本认证并限制 `/api/hello` API 需要认证：

   package com.example.demo;

   import org.springframework.context.annotation.Bean;
   import org.springframework.context.annotation.Configuration;
   import org.springframework.security.config.annotation.web.builders.HttpSecurity;
   import org.springframework.security.config.annotation.web.builders.AuthenticationManagerBuilder;
   import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
   import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
   import org.springframework.security.web.SecurityFilterChain;
   import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

   @Configuration
   @EnableWebSecurity
   public class SecurityConfig {

       @Bean
       public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
           http
               .authorizeRequests(authorizeRequests ->
                   authorizeRequests
                       .antMatchers("/api/hello").authenticated()  // 需要认证的 API
                       .anyRequest().permitAll()  // 其他 API 允许所有访问
               )
               .httpBasic();  // 使用基本认证
           return http.build();
       }
   }


5. **主应用程序类**

   确保你的主应用程序类 `DemoApplication` 存在并具有 `@SpringBootApplication` 注解：

   package com.example.demo;

   import org.springframework.boot.SpringApplication;
   import org.springframework.boot.autoconfigure.SpringBootApplication;

   @SpringBootApplication
   public class DemoApplication {

       public static void main(String[] args) {
           SpringApplication.run(DemoApplication.class, args);
       }
   }


6. **运行应用**

   通过运行 `DemoApplication` 类来启动应用程序。你可以使用以下命令：

   ./mvnw spring-boot:run

7. **测试**

   - 访问 `http://localhost:8080/api/hello`，你会被要求输入用户名和密码。使用用户名 `test` 和密码 `123456`。
   - 输入正确的凭证后，你将看到返回的字符串 "Hello World"。

